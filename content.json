{"meta":{"title":"Hobby的博客","subtitle":"善总结者，常取胜","description":"战五渣一枚","author":"Hobby","url":"","root":"/"},"pages":[],"posts":[{"title":"1004-Counting-Leaves(30分)","slug":"1004-Counting-Leaves-30分","date":"2020-02-14T02:46:05.000Z","updated":"2020-02-14T02:51:51.565Z","comments":true,"path":"2020/02/14/1004-Counting-Leaves-30分/","link":"","permalink":"/2020/02/14/1004-Counting-Leaves-30%E5%88%86/","excerpt":"","text":"1004 Counting Leaves (30分) A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child. Input Specification: Each input file contains one test case. Each case starts with a line containing 0&lt;N&lt;100, the number of nodes in a tree, and M (&lt;N), the number of non-leaf nodes. Then M lines follow, each in the format: 1ID K ID[1] ID[2] ... ID[K] where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID‘s of its children. For the sake of simplicity, let us fix the root ID to be 01. The input ends with N being 0. That case must NOT be processed. Output Specification:For each test case, you are supposed to count those family members who have no child for every seniority level starting from the root. The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line. The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child. Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node. Then we should output 0 1 in a line. Sample Input:122 101 1 02 Sample Output:10 1 求每一层的叶子结点，建树遍历就好了 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;/* * 求每层的叶子结点有几个 */struct Node&#123; int father; int level; bool havechild;&#125;;Node node[101];int number[101];int main() &#123; int n,m; int num,nownode,childnode; int maxlevel = 1,maxnode = 1; cin&gt;&gt;n&gt;&gt;m; //结构体结点的初始化 for(int i=0; i&lt;=n; i++) &#123; node[i].father = 0; node[i].havechild = 0; node[i].level = 0; &#125; node[1].level = 1; for(int i=1; i&lt;=m; i++)&#123; cin&gt;&gt;nownode; maxnode = max(maxnode,nownode); cin&gt;&gt;num; if(num!=0)&#123; node[nownode].havechild = 1; &#125; while(num--)&#123; cin&gt;&gt;childnode; maxnode = max(maxnode,childnode); node[childnode].father = nownode;// node[childnode].level = node[nownode].level + 1; &#125; &#125; for(int i=1; i&lt;=maxnode; i++)&#123; for(int j=1; j&lt;=maxnode; j++)&#123; if(node[j].father == i) node[j].level = node[i].level + 1; &#125; &#125; for(int i=1; i&lt;=maxnode; i++)&#123; if(!node[i].havechild&amp;&amp;node[i].level!=0)&#123; number[node[i].level] ++; &#125; maxlevel = max(maxlevel,node[i].level); &#125; for(int i=1; i&lt;maxlevel; i++) cout &lt;&lt; number[i] &lt;&lt;&quot; &quot;; cout&lt;&lt; number[maxlevel] &lt;&lt; endl; return 0;&#125;","categories":[],"tags":[{"name":"数据结构-树","slug":"数据结构-树","permalink":"/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/"}]},{"title":"SpringMVC+Ajax;","slug":"SpringMVC-Ajax","date":"2019-12-09T08:50:00.000Z","updated":"2019-12-09T09:05:26.727Z","comments":true,"path":"2019/12/09/SpringMVC-Ajax/","link":"","permalink":"/2019/12/09/SpringMVC-Ajax/","excerpt":"","text":"如何使用SpringMVC+Ajax实现页面无刷新1.前端页面123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&lt;%@pagecontentType=\"text/html;charset=UTF-8\"language=\"java\"%&gt;&lt;html&gt; &lt;head&gt; &lt;metacharset=\"UTF-8\"&gt; &lt;title&gt;添加图书&lt;/title&gt; &lt;script&gt; var xmlhttp; function check()&#123; varisbn=document.getElementById(\"isbn\").value; var url=\"/JQuery/isSameIsbn\";//通过路径名，请求视图控制器 //1.创建异步对象 xmlhttp=new XMLHttpRequest(); //4.注册事件 xmlhttp.onreadystatechange=checkResult;//响应函数 //2.设置请求的参数，包括请求的方式，请求的url等等 xmlhttp.open(\"POST\",url,true);//设置访问的页面 //3.发送请求 xmlhttp.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded;charset=utf-8\"); xmlhttp.send('isbn='+isbn);//执行访问 &#125; function checkResult()&#123; if(xmlhttp.readyState==4&amp;&amp;xmlhttp.status==200) //获取返回的数据 document.querySelector('.pass').innerHTML=xmlhttp.responseText; console.log(xmlhttp.responseText); &#125; &lt;/script&gt; &lt;/head&gt;&lt;body&gt; &lt;form action=\"/admin/addBook/add\" method=\"post\" enctype=\"multipart/form-data\"&gt; &lt;div class=\"checked\"&gt; &lt;label&gt;书号&lt;/label&gt; &lt;input type=\"text\" name=\"isbn\" id=\"isbn\" placeholder=\"请输入书号\"onkeyup=\"check()\"&gt; &lt;p class=\"pass\"style=\"display:inline-block\"&gt;&lt;/p&gt; &lt;/div&gt; &lt;label&gt;书名&lt;/label&gt; &lt;input type=\"text\" name=\"title\" placeholder=\"请输入书名\"&gt;&lt;br&gt; &lt;label&gt;价格&lt;/label&gt; &lt;input type=\"text\" name=\"price\" placeholder=\"请输入价格\"&gt;&lt;br&gt; &lt;label&gt;简介&lt;/label&gt; &lt;input type=\"file\" name=\"file\" placeholder=\"\"&gt;&lt;br&gt; &lt;label&gt;作者名字&lt;/label&gt; &lt;input type=\"text\" name=\"author.name\" placeholder=\"请输入作者名字\"&gt;&lt;br&gt; &lt;label&gt;作者电话&lt;/label&gt; &lt;input type=\"text\" name=\"author.tel\" placeholder=\"请输入作者电话\"&gt;&lt;br&gt; &lt;label&gt;作者邮箱&lt;/label&gt; &lt;input type=\"text\" name=\"author.email\" placeholder=\"请输入作者邮箱\"&gt;&lt;br&gt; &lt;input type=\"submit\" value=\"添加\"&gt; &lt;/form&gt;&lt;span id=\"checkResult\"&gt;$&#123;message&#125;&lt;/span&gt;&lt;a href=\"/admin/rebackMain\"&gt;返回主页&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;```` ## 2.通过url请求视图控制器，在视图控制其中给出输出结果```java @RequestMapping(\"/JQuery/isSameIsbn\") @ResponseBody publicvoidisSameIsbn(HttpServletResponse response,HttpServletRequest request)throws IOException&#123; String isbn=request.getParameter(\"isbn\"); response.setHeader(\"Content-type\",\"application/json;charset=UTF-8\"); Stringmessage=\"\"; Bookbook=adminService.findBookByIsbn(isbn); if(book!=null)&#123; message=message+\"&lt;spanstyle='color:red'&gt;×已有此书号&lt;/span&gt;\"; &#125;else&#123; message=message+\"&lt;spanstyle='color:green'&gt;√可用的书号&lt;/span&gt;\"; &#125; PrintWriterout=response.getWriter(); out.print(message); out.flush(); out.close(); &#125;` 注意的问题：出现？？乱码解决方法：将response的响应头设置为utf-8格式","categories":[],"tags":[]}]}